#!/usr/bin/env php
<?php
/**
* lsat: ls at a specified time
*
* Shell utility to recursively list files & folders in a path, searching for last modified timestamps within a specified window.
*
* Install by copying your to PATH (eg /usr/bin/) and chown to 755
* Requires PHP 5.5+ CLI
*
* @author Viper-7 <viper7@viper-7.com
* @license Beerware
**/
$filter = $path = null;
$onlydirs = $onlyfiles = false;

// Decode the command line arguments
$opts = getopt('Hhmrcszfdvxb:a:', array('help'));

if(isset($opts['H']))
	echo '<pre>';

// Parse the path component from the command line too
$extras = array();
foreach(array_slice($argv, 1) as $option) {
	if($option[0] != '-')
		$extras[] = $option;
}

// Decode the path name from extra short-hand number components
$digits = array_filter($extras, function ($a) { return preg_match('/^[0-9]+(?:[ymwdhms])?$/', $a); });
if(count($digits) + 1 == count($extras)) {
	list($path) = array_values(array_diff($extras, $digits));
}

// Support shorthand syntax:
// 'lsat 5' for 'lsat -xfb5'
// 'lsat 5 2' for 'lsat -xvfb5a2'
if(count($digits) > 0 && !file_exists($digits[0]) && !isset($opts['a']) && !isset($opts['b'])) {
	switch(count($digits)) {
		case 2:
			$opts['a'] = $digits[1];
		case 1:
			$opts['b'] = $digits[0];
	}
	
	$opts += array('x' => '', 'f' => '');
}

if(isset($opts['help']) || isset($opts['h'])) {
	echo "Usage: lsat [-mrcszfdvxh] [-bN[ymwdhms]] [-aN[ymwdhms]] <path>\n";
	echo "Recursively lists files and folders which have status change times within a specified window\n";
	echo "\n";
	echo "-m  \tFilter by last modified time (default)\n";
	echo "-r  \tFilter by last accessed time\n";
	echo "-c  \tFilter by inode change time\n";
	echo "-s  \tSort the results\n";
	echo "-z  \tReverse sorting order\n";
	echo "-f  \tFilter to show files only\n";
	echo "-d  \tFilter to show folders only\n";
	echo "-v  \tBe verbose (display progress)\n";
	echo "-x  \tAttempt to exclude valid backups, caches and logs\n";
	echo "-bN \tFilter starting from N days ago (default 1)\n";
	echo "-aN \tFilter from N days after the start (default unlimited)\n";
	echo "-h  \tShow this help\n";
	echo "\n";
	echo "\n";
	echo "Example usage:\n";
	echo "\n";
	echo "Show all files & folders from /var/www changed in the past 24 hours\n";
	echo "lsat /var/www\n";
	echo "\n";
	echo "Show a sorted and filtered list of files from /home changed in the past 5 days\n";
	echo "lsat -sxfvb5 /home\n";
	echo "\n";
	echo "Show all folders on the server created exactly 20 days ago\n";
	echo "lsat -db20a1 /\n";
	echo "\n";
	echo "Short-hand syntax:\n";
	echo "\n";
	echo "lsat 5    \tEquivalent to lsat -xfb5\n";
	echo "lsat 6 2  \tEquivalent to lsat -xfb6a2\n";
	echo "\n";
	die();
}

if(isset($opts['v']))
	echo "Working...";

try {
	$folder = new FolderHistory($path);
} catch(Exception $e) {
	if(isset($opts['v']))
		echo "\r";

	echo $e->getMessage() . "\n";
	exit(1);
}

// Set filter mode
foreach(str_split('mrc') as $c) {
	if(isset($opts[$c])) {
		$folder->setType($c);
	}
}

// Generate timestamp for days ago filter
if(isset($opts['b'])) {
	$ts = strtotime('-' . getduration($opts['b']));
} else {
	$ts = time() - 86400;
}

// Generate timestamp for days since filter
if(isset($opts['a'])) {
	$filter = strtotime('+' . getduration($opts['a']), $ts);
}

// Sort if required
if(isset($opts['s']))
	$folder->setSort(true);

if(isset($opts['z']))
	$folder->setReverseSort(true);

// Verbose mode with sorting shows the parsing process as it goes
if(isset($opts['v']) && (isset($opts['z']) || isset($opts['s']))) {
	$folder->setScanCallback(function($path) {
		static $lastlen;
		if(!isset($lastlen)) $lastlen=0;
		
		if(substr($path, 0, 2) == './') $path = substr($path, 2);
		$path = preg_replace('/[^a-zA-Z0-9_\.\/-]+/', '', $path);
		if(strlen($path) > 71) $path = substr($path,0,68) . '...';
		$out = str_pad("\rScanning {$path}", max($lastlen, 80), ' ', STR_PAD_RIGHT);
		echo $out;
		$lastlen = strlen($out);
	});
}
	
// Fetch the file list
$files = $folder->listAt($ts);

// Filter to files
if(isset($opts['f']))
	$onlyfiles = true;

// Filter to folders
if(isset($opts['d']))
	$onlydirs = true;

// Put the cursor back to the start of the line for our actual output
if(isset($opts['v']))
	echo "\r";

$maxlen = 0;
$toshow = array();
foreach($files as $file => $ts) {
	$rfile = trim($file);
	
	// Exclude files matching */backups/*.[gz|zip]
	if(isset($opts['x'])) {
		if(preg_match('/session\/sess_|\/silverstripe-cache|\/php\.socket$|backups\/.*?\.(?:gz|zip|sql)|backups$|logs\/.*?\.log/i', $rfile))
			continue;
	}
	
	$file = preg_replace('/^\.[\/\\\\]/','',$file);

	if(is_dir($rfile))
		// Directory flag
		$size = str_pad('', 12, ' ', STR_PAD_LEFT);
	else
		// File size in kilobytes
		$size = str_pad(number_format(filesize($rfile)/1024, 1) . ' kb', 12, ' ', STR_PAD_LEFT);
	
	// Format the stat timestamp
	$stat = date('d-m-Y h:i:s', $ts);
	
	if(PHP_OS == 'Linux')
		$perms = getperms($rfile);
	else
		$perms = '';
	
	// If the file should be shown, show it!
	if((!$onlydirs || is_dir($rfile)) &&
	   (!$onlyfiles || !is_dir($rfile)) &&
	   (!$filter || $ts < $filter)) {
		if($files instanceof Generator) {
			$file = str_pad(preg_replace('/^\.\//','',$file), 80, ' ', STR_PAD_RIGHT);
			if($perms)
				echo "{$file}\t{$perms}\t{$size}\t{$stat}\n";
			else
				echo "{$file}\t{$size}\t{$stat}\n";
		} else {
			$toshow[] = array($file, $perms, $size, $stat);
			if(strlen($file) > $maxlen) $maxlen = strlen($file);
		}
	}
}

foreach($toshow as list($file, $perms, $size, $stat)) {
	// Pad the filename out to the max width for the column
	$file = str_pad($file, $maxlen, ' ', STR_PAD_RIGHT);
	
	if($perms) 
		echo "{$file}\t{$perms}\t{$size}\t{$stat}\n";
	else
		echo "{$file}\t{$size}\t{$stat}\n";
}

// If no files were found, clear the output
if(empty($rfile)) {
	if(isset($opts['v']))
		echo "\r" . str_repeat(' ', 80) . "\r";
}

class FolderHistory {
	protected $path = '.';
	protected $type = 'm';	 // ['m', 'r', 'c']
	protected $sort = false;
	protected $reverseSort = false;
	protected $scanCallback;
	
	const FILE_MODIFIED = 'm';
	const FILE_ACCESSED = 'r';
	const FILE_CREATED = 'c';
	
	public function __construct($path = null) {
		if($path) {
			// Test we can really resolve the path first
			$rpath = realpath($path);
			
			if(!$rpath)
				throw new Exception('Invalid path: ' . $path);
			
			$this->path = $path;
		}
	}
	
	/**
	* Set the filter mode. Accepts a FolderHistory::FILE_ contant
	**/
	public function setType($type) {
		$this->type = $type;
	}
	
	/**
	* Set the sorting mode.
	**/
	public function setSort($sort) {
		$this->sort = $sort;
	}

	/**
	* Set the sorting direction.
	**/
	public function setReverseSort($reverse) {
		$this->reverseSort = $reverse;
	}
	
	/**
	* Set a callback for the scanner to invoke as it passes over the structure
	**/
	public function setScanCallback($callable) {
		$this->scanCallback = $callable;
	}
	
	protected function generateListAt($ts) {
		$files = array();
		$stack = array();
		
		$path = rtrim($this->path, '/\\');
		$stack[$path] = opendir($path);
		while($stack) {
			$ret = readdir(end($stack));
			
			if($ret == '.' || $ret == '..') continue;
			
			if($ret === false) {
				$dp = array_pop($stack);
				closedir($dp);
				unset($dp);
				continue;
			}
			
			end($stack);
			$container = key($stack);
			
			$file = "{$container}/{$ret}";
			
			if(is_dir($file)) {
				$dp = @opendir($file);
				
				if($dp)
					$stack[$file] = $dp;
			}
			
			if(isset($this->scanCallback)) {
				$callable = $this->scanCallback;
				$ret = $callable($file);
				
				if($ret === FALSE)
					continue;
			}
			
			switch($this->type) {
				case self::FILE_MODIFIED:
					$time = @filemtime($file);
					break;
				case self::FILE_ACCESSED:
					$time = @fileatime($file);
					break;
				case self::FILE_CREATED:
					$time = @filectime($file);
					break;
			}
			
			if($time > $ts)
				yield $file => $time;
		}
		
	}
	
	public function listAt($ts) {
		// Build the list generator
		$list = $this->generateListAt($ts);
		
		// If we don't need to sort, just return it for streaming access
		if(!$this->sort && !$this->reverseSort)
			return $list;
		
		// If we need to sort it, first copy the data into an array
		$files = array();
		foreach($list as $file => $time) {
			$files[$file] = $time;
		}
		
		// Now sort the result
		if($this->sort) {
			if($this->reverseSort) {
				asort($files);
			} else {
				arsort($files);
			}
		} else {
			krsort($files);
		}
		
		// Return an array of [path] => [stat timestamp]
		return $files;
	}
}

// Taken from php.net comments
function getperms($file) {
	$perms = fileperms($file);

	if (($perms & 0xC000) == 0xC000) {
		// Socket
		$info = 's';
	} elseif (($perms & 0xA000) == 0xA000) {
		// Symbolic Link
		$info = 'l';
	} elseif (($perms & 0x8000) == 0x8000) {
		// Regular
		$info = '-';
	} elseif (($perms & 0x6000) == 0x6000) {
		// Block special
		$info = 'b';
	} elseif (($perms & 0x4000) == 0x4000) {
		// Directory
		$info = 'd';
	} elseif (($perms & 0x2000) == 0x2000) {
		// Character special
		$info = 'c';
	} elseif (($perms & 0x1000) == 0x1000) {
		// FIFO pipe
		$info = 'p';
	} else {
		// Unknown
		$info = 'u';
	}

	// Owner
	$info .= (($perms & 0x0100) ? 'r' : '-');
	$info .= (($perms & 0x0080) ? 'w' : '-');
	$info .= (($perms & 0x0040) ?
				(($perms & 0x0800) ? 's' : 'x' ) :
				(($perms & 0x0800) ? 'S' : '-'));

	// Group
	$info .= (($perms & 0x0020) ? 'r' : '-');
	$info .= (($perms & 0x0010) ? 'w' : '-');
	$info .= (($perms & 0x0008) ?
				(($perms & 0x0400) ? 's' : 'x' ) :
				(($perms & 0x0400) ? 'S' : '-'));

	// World
	$info .= (($perms & 0x0004) ? 'r' : '-');
	$info .= (($perms & 0x0002) ? 'w' : '-');
	$info .= (($perms & 0x0001) ?
				(($perms & 0x0200) ? 't' : 'x' ) :
				(($perms & 0x0200) ? 'T' : '-'));
				
	return $info;
}

function getduration($dur) {
	$dur = trim($dur);

	if(!empty($dur) && !ctype_digit($dur)) {
		$last = substr($dur, -1);
		$dur = substr($dur, 0, -1);
	} else {
		$last = 'd';
	}
	
	$dur = intval(trim($dur));
	
	switch($last) {
		case 'y': return "{$dur} years";
		case 'm': return "{$dur} months";
		case 'w': return "{$dur} weeks";
		case 'h': return "{$dur} hours";
		case 's': return "{$dur} seconds";
		default:
		case 'd': return "{$dur} days";
	}
}
